@using VAR.Shared.LifeModels
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

@implements IDisposable
@inject IJSRuntime JsRuntime;
@inject ILifeService _lifeService;

@page "/life"

<PageTitle>Life</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Conway's Game of Life</MudText>

<MudGrid Justify="Justify.Center">
    <MudItem sm="6">
        <MudColorPicker Variant="Variant.Outlined" Label="Colore Sfondo" PickerVariant="PickerVariant.Dialog"
                        @bind-Text="BackgroundColor" Style="@($"color: {(BackgroundColor == "#32333d" ? "#FFFFFF" : BackgroundColor)};")" />
    </MudItem>
    <MudItem sm="6">
        <MudColorPicker Variant="Variant.Outlined" Label="Colore Elemento" PickerVariant="PickerVariant.Dialog"
                        @bind-Text="ElementColor" Style="@($"color: {(ElementColor == "#32333d" ? "#FFFFFF" : ElementColor)};")" />
    </MudItem>
    <MudItem sm="3">
        <MudNumericField @bind-Value="Width" Label="Larghezza" Variant="Variant.Outlined" OnBlur="async() => await Reset()" />
    </MudItem>
    <MudItem sm="3">
        <MudNumericField @bind-Value="Heigth" Label="Altezza" Variant="Variant.Outlined" OnBlur="async() => await Reset()" />
    </MudItem>
    <MudItem sm="3">
        <MudNumericField @bind-Value="Milliseconds" Label="Refresh Rate (in millisecondi)" Variant="Variant.Outlined" OnBlur="async() => await Reset()" />
    </MudItem>
    <MudItem sm="3">
        <MudNumericField @bind-Value="CellSize" Label="Grandezza Cella" Variant="Variant.Outlined" OnBlur="async() => await Reset()" />
    </MudItem>
    <MudItem Class="d-flex justify-center align-center" sm="4">
        <MudCheckBox @bind-Checked="Stop" Color="Color.Primary" Label="Blocca il gioco"></MudCheckBox>
    </MudItem>
    <MudItem Class="d-flex justify-center align-center" sm="4">
        <MudButton Variant="Variant.Outlined" OnClick="async() => await Reset()">Ricomincia il gioco</MudButton>
    </MudItem>
    <MudItem Class="d-flex justify-center align-center" sm="4">
        <MudCheckBox @bind-Checked="NoMargins" Color="Color.Primary" Label="Modalià Pacman :D"></MudCheckBox>
    </MudItem>
    <MudItem sm="12" Class="mt-4">
        <BECanvas Width="Width" Height="Heigth" @ref="CanvasRef"></BECanvas>
    </MudItem>
</MudGrid>

@code {
    long Width { get; set; } = 500;
    long Heigth { get; set; } = 400;
    int Milliseconds { get; set; } = 100;
    int CellSize { get; set; } = 20;
    string BackgroundColor { get; set; } = "#32333d";
    string ElementColor { get; set; } = "#fefefe";
    bool Stop { get; set; }
    bool NoMargins { get; set; }
    Board board;
    Timer timer;

    Canvas2DContext _ctx;
    protected BECanvasComponent CanvasRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            _ctx = await CanvasRef.CreateCanvas2DAsync();
            await Reset();
        }

        timer = new Timer(async (e) =>
        {
            if (!Stop)
            {
                board.Advance();
                await Render(Milliseconds);
            }
        }, null, 0, Milliseconds);

        await base.OnInitializedAsync();
    }


    async Task Reset(bool randomize = true)
    {
        board = new Board(
            Convert.ToInt32(Math.Round((double)Width)),
            Convert.ToInt32(Math.Round((double)Heigth)),
            CellSize,
            NoMargins);

        if (randomize)
            board.Randomize((double)20 / 100);

        await Render(Milliseconds);
    }

    async Task Render(int milliseconds)
    {
        System.Diagnostics.Stopwatch stopWatch = new();
        stopWatch.Start();

        await _lifeService.PrintCanvas(_ctx, board, CellSize, Width, Heigth, ElementColor, BackgroundColor);

        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",
            ts.Hours, ts.Minutes, ts.Seconds,
            ts.Milliseconds);
        Console.WriteLine("RunTime " + elapsedTime);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
