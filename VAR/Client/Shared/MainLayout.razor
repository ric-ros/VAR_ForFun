@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject Blazored.LocalStorage.ILocalStorageService LS
@inject IJSRuntime JS
@* In caso il sito non dovesse caricare subito... *@
<MudOverlay @bind-Visible="loadingSite" AutoClose="false" ZIndex="9999" id="loadingOverlay">
    <MudProgressCircular Color="Color.Info" Indeterminate="true" Size="Size.Large" />
</MudOverlay>

<MudThemeProvider @bind-IsDarkMode="@IsDarkMode" @ref="themeProvider" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudSwipeArea OnSwipe="@OnSwipe" Class="drawer-swipe-area" />
    <MudAppBar Elevation="0">
        @if (width < maxWindowWidth)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        }
        else
        {
            <MudToggleIconButton ToggledChanged="DrawerToggle"
                                 Icon="@Icons.Material.Filled.ArrowBack"
                                 Color="@Color.Inherit"
                                 Title="Chiudi Menu"
                                 ToggledIcon="@Icons.Material.Filled.ArrowForward"
                                 ToggledColor="@Color.Inherit"
                                 ToggledTitle="Apri Menu" />
        }
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" Edge="Edge.Start" Link="/" />
        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="@IsDarkMode"
                             Icon="@Icons.Material.Filled.DarkMode"
                             Color="@Color.Inherit"
                             Title="Off"
                             ToggledIcon="@Icons.TwoTone.LightMode"
                             ToggledColor="@Color.Warning"
                             ToggledTitle="On" />

        <MudIconButton Icon="@Icons.Custom.Brands.Facebook" Color="Color.Inherit" Link="#" />
        <MudIconButton Icon="@Icons.Custom.Brands.Instagram" Color="Color.Inherit" Link="#" />
    </MudAppBar>
    <MudDrawer @bind-Open="isOpen"
               Elevation="@(width < maxWindowWidth ? 5 : 0)"
               OpenMiniOnHover="true"
               Variant="MudBlazor.DrawerVariant.Mini">

        <MudDrawerHeader Class="@(IsDarkMode ? "" : "mud-theme-primary")">
            <MudText Typo="Typo.h6">@(isOpen ? "VAR" : "V")</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" >
            @Body
        </MudContainer>
        @*@if (!isStandAlone && !dismissed)
        {
            <InstallPopUp />
        }*@
    </MudMainContent>
</MudLayout>
@code {
    bool isOpen;
    bool clicked;
    bool isStandAlone;
    bool dismissed;
    bool loadingSite = true;
    public bool IsDarkMode { get; private set; }

    [Inject] IBreakpointService BreakpointListener { get; set; }
    [Inject] IResizeService ResizeService { get; set; }

    Guid _resizeSubscriptionId;
    Guid _breakpointSubscriptionId;
    int width;
    int maxWindowWidth = 970;


    MudThemeProvider themeProvider = new MudThemeProvider();

    void DrawerToggle()
    {
        isOpen = !isOpen;
        clicked = true;
    }

    protected override async Task OnInitializedAsync()
    {
        isStandAlone = await JS.InvokeAsync<bool>("isInStandaloneMode");
        dismissed = await LS.GetItemAsync<bool>("dismissed");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ////prova per vedere se funziona il loadingSite
            //await Task.Delay(2000);
            loadingSite = false;
            IsDarkMode = await themeProvider.GetSystemPreference();

            width = (await ResizeService.GetBrowserWindowSize()).Width;
            isOpen = width > maxWindowWidth;

            //registro il delegate... qui ci pensa mudBlazor con il ResizeService
            _resizeSubscriptionId = await ResizeService.Subscribe((size) =>
            {
                width = size.Width;
                //height = size.Height; per ora non serve...

                if (!clicked)
                    isOpen = width > maxWindowWidth;

                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
            {
                ReportRate = 50,
                NotifyOnBreakpointOnly = false,
            });

            StateHasChanged();
        }
    }

    //in teoria non dovrebbe mai usare il dispose sul MainLayout ma non si sa mai...
    public async ValueTask DisposeAsync()
    {
        await ResizeService.Unsubscribe(_resizeSubscriptionId);
    }


    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight && !isOpen)
        {
            isOpen = true;
            StateHasChanged();
        }
    }
}